* 题目地址
https://github.com/azl397985856/leetcode/blob/master/problems/26.remove-duplicates-from-sorted-array.md
https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/
* 题目描述

  #+BEGIN_SRC latex
    Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

    Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

    Example 1:

    Given nums = [1,1,2],

    Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

    It doesn't matter what you leave beyond the returned length. Example 2:

    Given nums = [0,0,1,1,1,2,2,3,3,4],

    Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.

    It doesn't matter what values are set beyond the returned length. Clarification:

    Confused why the returned value is an integer but your answer is an array?

    Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

    Internally you can think of this:

    // nums is passed in by reference. (i.e., without making a copy)
    int len = removeDuplicates(nums);

    // any modification to nums in your function would be known by the caller.
    // using the length returned by your function, it prints the first len elements.
    for (int i = 0; i < len; i++) {
      print(nums[i]);
    }
  #+END_SRC

* 思路
题意：给定一个排序的数组，但是存在重复数字，需要剔除重复数字，得到新的数组的长度。要求使用O(1)的空间复杂度和O(n)的时间复杂度
思路：这种类型一般采用快慢指针的方式来解。初始状态下，快慢指针指向第一个元素，快指针前进一步，如果当前快慢指针数字相同，则慢指针不动，快指针继续向前。如果快指针指向数字和慢指针不一致，则慢指针前进一步，且将当前慢指针指向数字更新为快指针指向的数字。直到快指针遍历数组。则数组新长度为慢指针对应的index+1
代码：

#+BEGIN_SRC python :results output
  def removeDuplicates(nums) -> int:
      if nums:
          point_slow = 0
          for point_fast in range(len(nums)):
              if nums[point_slow] != nums[point_fast]:
                  point_slow += 1
                  nums[point_slow] = nums[point_fast]
          return point_slow + 1
      else:
          return 0

  nums = []
  re = removeDuplicates(nums)
  print ("num of result: {}, result:{}", re, nums[:re])
  nums = [1, 1, 2]
  re = removeDuplicates(nums)
  print ("num of result: {}, result:{}", re, nums[:re])
  nums = [0,0,1,1,1,2,2,3,3,4]
  re = removeDuplicates(nums)
  print ("num of result: {}, result:{}", re, nums[:re])
#+END_SRC

#+RESULTS:
: num of result: {}, result:{} 0 []
: num of result: {}, result:{} 2 [1, 2]
: num of result: {}, result:{} 5 [0, 1, 2, 3, 4]

