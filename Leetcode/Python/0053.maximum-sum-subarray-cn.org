* 题目地址
https://github.com/azl397985856/leetcode/blob/master/problems/53.maximum-sum-subarray-cn.md
https://leetcode.com/problems/maximum-subarray/
* 题目描述

  #+BEGIN_SRC latex
    Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

    Example:

    Input: [-2,1,-3,4,-1,2,1,-5,4],
    Output: 6
    Explanation: [4,-1,2,1] has the largest sum = 6.
    Follow up:

    If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
  #+END_SRC

* 思路
题意：得到数组和最大的连续子序列。要求时间复杂度为O(n)
思路：
+ 最常规的暴力解法为O(n^3)，首先遍历队列的首，尾位置为O(n^2)，然后计算首尾的数列的为O(n)，相乘为O(n^3)。进一步优化，可以提前计算数列的前缀和，通过prefixSum[beigin_index] - prefixSum[end_index]直接计算数列和，这样时间复杂度为O(n^2)，空间复杂度为O(n)，如果直接将原始数组替换为前缀和数组则空间复杂度降为O(1)。再进一步优化，仍然利用计算前缀和的思路，在计算前缀和S(i)时，i表示前i个数列的和，需要维护一个S(k),k=0,1...i-1的最小值min_k，那么S(i)-min_k即为以i位置为终点的最大子序列和，同时添加一个变量对全局的最大值进行维护。遍历所有i位置上的最大子序列和，即可得到全局最大子序列和，时间复杂度为O(n),空间复杂度为O(1)。
+ 动态规划：状态转移方程为:dp[i] = max(dp[i-1] + num[i], num[i]) ,dp[0] = num[0]，整个过程中需要维护全局最大子序列和:maxSum = max(dp[i], maxSum)。时间复杂度为O(n)，空间复杂度为O(1)
代码：


#+BEGIN_SRC python :results output
  #动态规划
  def maxSubArray(nums) -> int:
      if not len(nums):
          return 0
      dp = maxsum = nums[0]
      for i in range(1, len(nums)):
          dp = max(nums[i], dp + nums[i])
          maxsum = max(dp, maxsum)
      return maxsum

  nums = [-2,1,-3,4,-1,2,1,-5,4]
  print ("result of {} is {}:".format(nums, maxSubArray(nums)))

#+END_SRC

#+RESULTS:
: result of [-2, 1, -3, 4, -1, 2, 1, -5, 4] is 6:


