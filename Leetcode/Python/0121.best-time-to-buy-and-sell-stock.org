* 题目地址
https://github.com/azl397985856/leetcode/blob/master/problems/121.best-time-to-buy-and-sell-stock.md
* 题目描述

  #+BEGIN_SRC latex
    Say you have an array for which the ith element is the price of a given stock on day i.

    If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

    Note that you cannot sell a stock before you buy one.

    Example 1:

    Input: [7,1,5,3,6,4]
    Output: 5
    Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
    Not 7-1 = 6, as selling price needs to be larger than buying price.
    Example 2:

    Input: [7,6,4,3,1]
    Output: 0
    Explanation: In this case, no transaction is done, i.e. max profit = 0.
  #+END_SRC

* 思路
题意:给定一系列stock价格，规定只能一次买入卖出，要求获得最大利润.
思路:遍历一次价格list，整个过程需要更新最低价格和当前的最大利润即可
代码:

#+BEGIN_SRC python :results output
  def maxProfit(prices) -> int:
      if not prices:
          return 0

      min_price = float('inf')
      max_profit = 0

      for price in prices:
          if price < min_price:
              min_price = price
          elif max_profit < price - min_price:
              max_profit = price - min_price
      return max_profit

  if __name__ == '__main__':
      prices = [7,1,5,3,6,4]
      print ("maxprofit of {} is {}".format(prices, maxProfit(prices)))
      prices = [7,6,4,3,1]
      print ("maxprofit of {} is {}".format(prices, maxProfit(prices)))
#+END_SRC

#+RESULTS:
: maxprofit of [7, 1, 5, 3, 6, 4] is 5
: maxprofit of [7, 6, 4, 3, 1] is 0
