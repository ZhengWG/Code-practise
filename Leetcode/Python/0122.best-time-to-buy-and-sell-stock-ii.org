* 题目地址
https://github.com/azl397985856/leetcode/blob/master/problems/122.best-time-to-buy-and-sell-stock-ii.md
* 题目描述

  #+BEGIN_SRC latex
    Say you have an array for which the ith element is the price of a given stock on day i.

    Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

    Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

    Example 1:

    Input: [7,1,5,3,6,4]
    Output: 7
    Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
    Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
    Example 2:

    Input: [1,2,3,4,5]
    Output: 4
    Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
    Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
    engaging multiple transactions at the same time. You must sell before buying again.
    Example 3:

    Input: [7,6,4,3,1]
    Output: 0
    Explanation: In this case, no transaction is done, i.e. max profit = 0.
  #+END_SRC

* 思路
题意:给定价格list，可以买卖多次，但是每次买入之前必须卖出，求获取最大利润。
思路:只要在每次价格上涨前后买入买出即可获得最高利润
代码:

#+BEGIN_SRC python :results output
  def maxProfit2(prices) -> int:
      gains = [prices[i] - prices[i - 1] for i in range(1, len(prices)) if prices[i] - prices[i -1] > 0]
      return sum(gains)

  if __name__ == '__main__':
      prices = [7,1,5,3,6,4]
      print ("maxprofit2 of {} is {}".format(prices, maxProfit2(prices)))
      prices = [1,2,3,4,5]
      print ("maxprofit2 of {} is {}".format(prices, maxProfit2(prices)))
      prices = [7,6,4,3,1]
      print ("maxprofit2 of {} is {}".format(prices, maxProfit2(prices)))
#+END_SRC

#+RESULTS:
: maxprofit2 of [7, 1, 5, 3, 6, 4] is 7
: maxprofit2 of [1, 2, 3, 4, 5] is 4
: maxprofit2 of [7, 6, 4, 3, 1] is 0
