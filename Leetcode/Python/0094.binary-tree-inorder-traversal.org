* 题目地址
https://github.com/azl397985856/leetcode/blob/master/problems/94.binary-tree-inorder-traversal.md
* 题目描述

  #+BEGIN_SRC latex
    Given a binary tree, return the inorder traversal of its nodes' values.

    Example:

    Input: [1,null,2,3]
    1
    \
    2
    /
    3

    Output: [1,3,2]
    Follow up: Recursive solution is trivial, could you do it iteratively?
  #+END_SRC

* 思路
题意:给定一棵二叉树，给出该树的中序遍历
思路:一般采用递归的思路，下面给出前序，中序，后序，层序遍历的代码
代码:

#+BEGIN_SRC python :results output
  # Definition for a binary tree node
  class TreeNode:
      def __init__(self, x, left = None, right = None):
          self.val = x
          self.left = left
          self.right = right


  def Create_Binary_Tree(root):
      if not len(data_input):
          return
      if data_input[0] is not None:
          root = TreeNode(data_input[0])
          data_input.pop(0)
          print(data_input)
          root.left = Create_Binary_Tree(root.left)
          root.right = Create_Binary_Tree(root.right)
          return root
      else:
          root = None
          data_input.pop(0)
          print(data_input)

  def Inorder(root):
      if root is not None:
          Inorder(root.left)
          results.append(root.val)
          Inorder(root.right)

  def preorder(root):
      if root is not None:
          results.append(root.val)
          preorder(root.left)
          preorder(root.right)

  def postorder(root):
      if root is not None:
          postorder(root.left)
          postorder(root.right)
          results.append(root.val)

  def levelorder(root):
      queue = [root]
      while len(queue):
          node = queue.pop(0)
          results.append(node.val)
          if node.left is not None:
              queue.append(node.left)
          if node.right is not None:
              queue.append(node.right)

  if __name__ ==  '__main__':
      data_input = [1, None, 2, 3]
      root = None
      root = Create_Binary_Tree(root)
      results = []
      Inorder(root)
      print("inorder result: {}".format(results))
      results = []
      preorder(root)
      print("preorder result: {}".format(results))
      results = []
      postorder(root)
      print("postorder result: {}".format(results))
      results = []
      levelorder(root)
      print("levelorder result: {}".format(results))
#+END_SRC

#+RESULTS:
: [None, 2, 3]
: [2, 3]
: [3]
: []
: inorder result: [1, 3, 2]
: preorder result: [1, 2, 3]
: postorder result: [3, 2, 1]
: levelorder result: [1, 2, 3]

