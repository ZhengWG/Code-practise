// ConsoleApplication1.cpp : 定义控制台应用程序的入口点。
//
#include "stdafx.h"
#include <iostream>
#include <string.h>
#include <algorithm>
#include <vector>
#include <map>;
#define INF 999999999
#pragma warning(disable:4996)
#define MAX 201
using namespace std;
int n, k;
map<string, int> cities;
int G[MAX][MAX];
int d[MAX];
bool vis[MAX] = { false };
int t_happy =0, a_happy=0;
vector<int> tempPath, Path;
vector<int> pre[MAX];
int st = 0;
int Happ[MAX];
int cnt = 0;
int cost = 0;
int cost_f = 0;
string name_city[MAX];

void Dijskra(int s){
	fill(d, d + MAX, INF);
	d[s] = 0;
	for (int i = 0; i < n; i++){
		int u = -1;
		int min = INF;
		for (int j = 0; j < n; j++){
			if (d[j] < min&&vis[j] == false){
				u = j;
				min = d[j];
			}
		}
		vis[u] = true;
		if (u == -1)
			return;
		for (int v = 0; v < n; v++){
			if (vis[v] == false && G[u][v] != INF){
				if (d[v] > d[u] + G[u][v]){
					d[v] = d[u] + G[u][v];
					pre[v].clear();
					pre[v].push_back(u);
				}
				else if (d[v] == d[u] + G[u][v]){
					pre[v].push_back(u);
				}
			}
		}
	}
}

void DFS(int v){
	if (v == st){

		cnt++;
		tempPath.push_back(v);
		int value=0;
		for (int i = 0; i < tempPath.size(); i++){
			value += Happ[tempPath[i]];
		}
		if (value > t_happy){
			t_happy = value;
			a_happy = value / (tempPath.size()-1);
			Path = tempPath;
			cost_f = cost;
		}
		else if (value == t_happy){
			if ((value / (tempPath.size())-1) > a_happy){
				t_happy = value;
				a_happy = value / (tempPath.size()-1);
				Path = tempPath;
			}
		}
		tempPath.pop_back();
	}

	tempPath.push_back(v);
	for (int i = 0; i < pre[v].size(); i++){
		cost += G[v][pre[v][i]];
		DFS(pre[v][i]);
		cost -= G[v][pre[v][i]];
	}
	tempPath.pop_back();
}

int main()
{
	fill(G[0], G[0]+ MAX*MAX, INF);
	fill(Happ, Happ + MAX, 0);
	scanf("%d%d", &n, &k);
	char city[4];
	scanf("%s", city);
	cities.insert(pair<string, int>(city, 0));
	name_city[0] = city;
	for (int i = 1; i < n; i++){
		int num;
		scanf("%s", city);
		scanf("%d", &num);
		cities.insert(pair<string, int>(city, i));
		Happ[i] = num;
		name_city[i] = city;
	}

	for (int i = 0; i < k; i++){
		char city1[4];
		char city2[4];
		int qu;
		scanf("%s%s%d",city1, city2, &qu);
		int c1 = cities.find(city1)->second;
		int c2 = cities.find(city2)->second;
		G[c1][c2] = qu;
		G[c2][c1] = qu;
	}

	Dijskra(0);
	int v = cities.find("ROM")->second;
	DFS(v);
	printf("%d %d %d %d\n", cnt, cost_f, t_happy, a_happy);
	for (int i = Path.size() - 1; i > 0; i--){
		printf("%s->", name_city[Path[i]].c_str());
	}
	printf("%s", name_city[Path[0]].c_str());
	system("pause");
	return 0;
}