// ConsoleApplication1.cpp : 定义控制台应用程序的入口点。
//
#include "stdafx.h"
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#define MAX 10010
#pragma warning (disable:4996)
using namespace std;
int n, k;

struct Car{
	string id;
	int h, m, s;
	bool Is_in;
	bool marked;
	friend bool operator < (const Car &car1, const Car &car2){
		if (car1.h == car2.h){
			if (car1.m == car2.m){
				if (car1.s == car2.s)
					return car1.id < car2.id;
				return car1.s < car2.s;
			}
			return car1.m < car2.m;
		}
		return car1.h < car2.h;
	}
}cars[MAX];

bool cmp(Car car1, Car car2){
	return car1.id < car2.id;
}

int main()
{
	scanf("%d%d", &n, &k);
	for (int i = 0; i < n; i++){
		cin >> cars[i].id;
		scanf("%d:%d:%d", &cars[i].h, &cars[i].m, &cars[i].s);
		string sta;
		cin >> sta;
		if (sta == "in")
			cars[i].Is_in = 1;
		else
			cars[i].Is_in = 0;
	}
	sort(cars, cars + n);
	map<string, int> Id_num;
	map<string, int> Id_time;
	map<string, int> Id_ans;
	vector <Car> max_cars;
	int max_c = 0;
	for (int i = 0; i < n; i++){
		if (cars[i].Is_in){
			Id_num[cars[i].id] = i;
			int time = cars[i].h * 3600 + cars[i].m * 60 + cars[i].s;
			if (time == 0)
				Id_time[cars[i].id] = -1;
			else
				Id_time[cars[i].id] = time;
		}
		else if (Id_time[cars[i].id] && !cars[Id_num[cars[i].id]].marked){
			if (Id_time[cars[i].id] == -1) Id_time[cars[i].id] = 0;
			cars[i].marked = 1;
			cars[Id_num[cars[i].id]].marked = 1;
			int time = cars[i].h * 3600 + cars[i].m * 60 + cars[i].s;
			Id_ans[cars[i].id] += time - Id_time[cars[i].id];
			if (Id_ans[cars[i].id] > max_c){
				max_cars.clear();
				max_cars.push_back(cars[i]);
				max_c = Id_ans[cars[i].id];
			}
			else if (Id_ans[cars[i].id] == max_c){
				max_cars.push_back(cars[i]);
			}
		}
	}
	int ans = 0;
	int j = 0;
	for (int i = 0; i < k; i++){
		int h, m, s;
		scanf("%d:%d:%d", &h, &m, &s);
		int time = h * 3600 + m * 60 + s;
		for (; j < n; j++){
			int tmp = cars[j].h * 3600 + cars[j].m * 60 + cars[j].s;
			if (tmp <= time){
				if (cars[j].marked && cars[j].Is_in)
					ans++;
				if (cars[j].marked && !cars[j].Is_in)
					ans--;
			}
			else
				break;
		}
		printf("%d\n", ans);
	}

	sort(max_cars.begin(), max_cars.end(), cmp);
	for (int i = 0; i < max_cars.size(); i++){
		printf("%s ", max_cars[i].id.c_str());
	}
	printf("%02d:%02d:%02d\n", max_c / 3600, (max_c % 3600) / 60, max_c - (max_c / 3600) * 3600 - (max_c % 3600) / 60*60);

	system("pause");
	return 0;
}