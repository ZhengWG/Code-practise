// ConsoleApplication1.cpp : 定义控制台应用程序的入口点。
//
#include "stdafx.h"
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
#include <map>
#include <set>
#include <queue>
#define MAX 21
#pragma warning (disable:4996)
using namespace std;
int n;
int nums[MAX];
struct Node{
	int v;
	int height;
	Node* lchild;
	Node* rchild;
};

Node* newNode(int v){
	Node* node = new Node;
	node->v = v;
	node->height = 1;
	node->lchild = NULL;
	node->rchild = NULL;
	return node;
}

int getHeight(Node* root){
	if (root == NULL)
		return 0;
	return root->height;
}

void updateHeight(Node* root){
	root->height = max(getHeight(root->lchild), getHeight(root->rchild)) + 1;
	return;
}

int getBalance(Node* &root){
	return (getHeight(root->lchild) - getHeight(root->rchild));
}

void L(Node* &root){
	Node* temp = root->rchild;
	root->rchild = temp->lchild;
	temp->lchild = root;
	updateHeight(root);
	updateHeight(temp);
	root = temp;
	return;
}

void R(Node* &root){
	Node* temp = root->lchild;
	root->lchild = temp->rchild;
	temp->rchild = root;
	updateHeight(root);
	updateHeight(temp);
	root = temp;
	return;
}

void insert(Node* &root, int v){
	if (root == NULL){
		root = newNode(v);
		return;
	}

	if (v == root->v)
		return;

	if (v < root->v){
		insert(root->lchild, v);
		updateHeight(root);
		if (getBalance(root) == 2){
			if (getBalance(root->lchild) == 1){
				R(root);
			}
			else if (getBalance(root->lchild) == -1){
				L(root->lchild);
				R(root);
			}
		}
	}
	else{
		insert(root->rchild, v);
		updateHeight(root);
		if (getBalance(root) == -2){
			if (getBalance(root->rchild) == -1){
				L(root);
			}
			else if (getBalance(root->rchild) == 1){
				R(root->rchild);
				L(root);
			}
		}
	}
}

int main()
{	
	scanf("%d", &n);
	Node* root = NULL;
	for (int i = 0; i < n; i++){
		scanf("%d", &nums[i]);
		insert(root, nums[i]);
	}
	printf("%d\n", root->v);
	system("pause");
	return 0;
}