#include <iostream>
#include <vector>
#include <algorithm>
#define MAX_RANKS 6
#define MAX_USER3 10001
#define MAX_SUB 100001
using namespace std;
//排序问题，关键在于排序函数cmp

typedef struct User{
	int ID;
	int num_perfect;
	int totalrank;
	int ranks[MAX_RANKS];
	bool flag_sub;
	User(){
		num_perfect = 0;
		totalrank = 0;
		flag_sub = false;
		for (int i = 0; i < MAX_RANKS; i++)
			ranks[i] = -1;
	}
}User;

int n, k, m;
vector<User> users;
int fullranks[MAX_RANKS];

int cmp(User user1, User user2){
	if (user1.totalrank != user2.totalrank)
		return user1.totalrank > user2.totalrank;
	else if (user1.num_perfect != user2.num_perfect)
		return user1.num_perfect > user2.num_perfect;
	else if (user1.flag_sub != user2.flag_sub)
		return user1.flag_sub > user2.flag_sub;
	else if (user1.ID != user2.ID)
		return user1.ID < user2.ID;
}

int main(){
	scanf("%d %d %d", &n, &k, &m);
	for (int i = 1; i <= k; i++){
		int rank;
		scanf("%d", &rank);
		fullranks[i] = rank;
	}
	users.resize(n + 1);
	for (int i = 1; i <= n; i++){
		users[i].ID = i;
	}

	for (int i = 0; i < m; i++){
		int id, num_pro, rank;
		scanf("%d %d %d", &id, &num_pro, &rank);
		if (rank < 0){
			if (users[id].ranks[num_pro] < 0)
				users[id].ranks[num_pro] = 0;
		}
		else{
			users[id].flag_sub = true;
			if (users[id].ranks[num_pro] < 0){//原来没有提交
				users[id].totalrank += rank;
				users[id].ranks[num_pro] = rank;
				if (rank == fullranks[num_pro])
					users[id].num_perfect++;
			}
			else{//原来有提交
				if (rank > users[id].ranks[num_pro]){//得分更高
					users[id].totalrank = users[id].totalrank + rank - users[id].ranks[num_pro];
					users[id].ranks[num_pro] = rank;
					if (rank == fullranks[num_pro])
						users[id].num_perfect++;
				}

			}
		}
	}

	sort(users.begin(), users.end(), cmp);

	int num_rank = 1;
	for (int i = 0; i < users.size(); i++){
		if (!users[i].flag_sub)
			continue;//都是-1
		else{
			if (!users[i].flag_sub)
				continue;
			else if (i == 0){
				printf("%d %05d %d", num_rank, users[i].ID, users[i].totalrank);
			}
			else{
				if (users[i].totalrank == users[i - 1].totalrank){
					printf("%d %05d %d",num_rank, users[i].ID, users[i].totalrank);
				}
				else{
					num_rank = i+1;
					printf("%d %05d %d", num_rank, users[i].ID, users[i].totalrank);
				}
			}
			for (int j = 1; j <= k; j++){
				if (users[i].ranks[j] == -1)
					printf(" -");
				else
					printf(" %d", users[i].ranks[j]);
			}
			printf("\n");
		}
	}

	system("pause");
	return 0;
}