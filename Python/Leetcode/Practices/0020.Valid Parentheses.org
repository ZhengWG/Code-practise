* 题目地址
https://leetcode.com/problems/valid-parentheses/description
https://github.com/azl397985856/leetcode/blob/master/problems/20.validParentheses.md
* 题目描述

  #+BEGIN_SRC latex
    Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

    An input string is valid if:

    Open brackets must be closed by the same type of brackets.
    Open brackets must be closed in the correct order.
    Note that an empty string is also considered valid.

    Example 1:

    Input: "()"
    Output: true
    Example 2:

    Input: "()[]{}"
    Output: true
    Example 3:

    Input: "(]"
    Output: false
    Example 4:

    Input: "([)]"
    Output: false
    Example 5:

    Input: "{[]}"
    Output: true
  #+END_SRC

* 思路

题意简述：各类括号需要以相同的数目和顺序匹配，且空字符也符合要求
思路：采用栈数据结构，特点为先进后出，作为左括号的存储单元。当遇到右括号时，便可与左括号一一配对弹出。
代码：

#+BEGIN_SRC python :results output
    def isValid(words):
        stack = []
        w_map = {
            '{':'}',
            '[':']',
            '(':')'
        }
        for word in words:
            if word in w_map:
                stack.append(word)
            else:
                if not len(stack):
                    return False
                top_element = stack.pop()
                if word != w_map[top_element]:
                    return False
        return True
    re = isValid('()[]')
    print ('result for ()[] is {}'.format(re))
    re = isValid('')
    print ('result for '' is {}'.format(re))
    re = isValid('(]')
    print ('result for (] is {}'.format(re))
#+END_SRC

#+RESULTS:
: result for ()[] is True
: result for  is True
: result for (] is False

